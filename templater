#!/usr/bin/env ruby
require './templater_helper'
require 'pry'

class Templater
  extend TemplaterHelper

  @loop_stack = [] # pointer to loop start line
  array_index = [] # increments as data array is traversed
  template_line_pointer = 0

  get_files ARGV

  @output = open_write(@outfile)

    while template_line_pointer < @template.length # for each line in template
      line = @template[template_line_pointer]
      case
        when line =~ TemplaterHelper::START_EACH
          # get text between delimiters and tokenize it
          tokens = get_tokens(line, TemplaterHelper::EACH_CONTENT)# grab values after EACH
          if @json_stack.last.is_a? Array
            tokens = tokens.last
            working_data = @json_stack.last[array_index.last][tokens] # get data from hash inside array
          else # item on top of json_stack is a hash or string
            working_data = @json_stack.last
            # put return from hash into working data
            if tokens.is_a? Array
              tokens.each { |token| working_data = working_data[token] }
            else # tokens is a string
              working_data = working_data[tokens]
            end
          end
          output_line = ""

          array_index << 0 # first element of json data array being traversed
          @json_stack << working_data # put json query result on top of stack
          @loop_stack << template_line_pointer + 1 # append loop start line to stack
        when line =~ TemplaterHelper::END_EACH
          # when done iterating through top element of stacks, pop off pointers
          if array_index.last == @json_stack.last.length - 1
            array_index.pop
            @json_stack.pop
            @loop_stack.pop
          else
            # increment value in array_index and reset line pointer
            array_index[array_index.size - 1] = array_index.last + 1
            template_line_pointer = @loop_stack.last - 1
          end
          output_line = ""
        when line.include?(TemplaterHelper::TAG_OPEN)
          tokens = get_tokens(line, TemplaterHelper::TAG)
          if @json_stack.last.is_a? Array
            working_data = @json_stack.last[array_index.last] # get value for array index on top of stack
            if working_data.is_a? Hash
              tokens.shift
              tokens.each { |token| working_data = working_data[token] }
            end
          else #last element in json_stack is a hash
            working_data = @json_stack.last
            tokens.each { |token| working_data = working_data[token] } # iterate through hash with tokens values as keys and return the value to working_data
          end
          output_line = working_data
        else
          output_line = line
      end # case
      template_line_pointer += 1
      @output.puts line.gsub(TemplaterHelper::TAG, output_line)
    end # while
  close_write(@output)

end # class

